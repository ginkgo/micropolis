
TODO:
* Move buffers used by kernels to program scope variable
* For dicing/shading/rasterization call kernels as device-side enqueue
* Rename reyes_patches_per_pass to grids_per_pass or something like that
* Separate b&s batch size -> intermediate buffer size -> rendering batch size
* Investigate proper epsilon-culling for eye-splits
* Clean up Projection class
  * Only update when necessary
* Write polygon size estimation shader
* Implement dynamic-rate dicing

* Find source for driver crash when switching to OpenGL backend
  * This only happens on R9 290X -> Switched back to HD 7970
  * Perhaps try setting up a minimal debug case
  
* Investigate cause of ~2ms extra latency when creating framebuffers >800x600

* Shader system
  * Use Python for generation/compilation?
  * Noise functions

* Consider switching to ImageBuffers for framebuffer
* Implement multisampling

ONCE AVAILABLE:
* Use GL sync objects 
* Check for potential ways to get direct access to default framebuffer


DONE:

* Join all dicing, shading and rasterization kernels in single kernel program
* Switch readme to markdown/textile or something like that

* Query ideal work group size and use that for bound_n_split kernels
  * Also pick local stack size (vs. spill region) that way
  
* Implement Gregory patches (+Blender export script for catmull-clark)
* Add SCons build dir and config-option
* Implement PASSTHRU B&S method
* Implement BREADTHFIRST B&S method
* Debug deadlock/artifact problems in LOCAL B&S kernels
* Split B&S header files
* React more gracefully on missing input files and mistyped arguments
* Add save-scene feature to save camera position (and perhaps other stuff)
* Implement/recover CPU B&S for GL backend
* Dump several traces in trace dump mode
* Plot figures in benchmark.py with matplotlib

* Improve on parse_trace.py output
  * Queue name in bold
  * (Colored) vertical lines for orientation?
  * Method for combining commands into single one
  
* Implement BoundNSplitCLMultipass
* Use dump-mode to write a benchmark script that tries out many different setting combinations
  * use trace parsing code to calculate performance characteristics
* rename parse_trace.py and  and move actual trace parsing into separate file for reuse
* Add config options to dump trace and exit app after N frames
  * for scripted performance measurement
* Create command-dependency graph dump (In DOT format)
  * Integrated in trace instead
* Clean up parse_trace.py
  * Rename script to something more fitting
  * Time markers on scale
  * Visualize event dependencies
* Debug regression with Intel rasterizer black pixels
  * Only happens in debug build
  * Same thing happens in AMD CPU backend
* Handle output buffer overflow by writing stack back to input queue
* Rename *BoundNSplit* classes to BoundNSplit(CL|GL)(CPU|Local|Multipass)
* Rename *Renderer classes to Renderer(CL|GL)*
* Use distributed queuing to parallelize bns
* Make number of work groups in local bound-n-split kernel configurable
* Read Stanley & Anjul's scheduling paper!
* Automatically resize scratch-buffer for input buffers in OpenCLBoundNSplitLocal
* Make CL::TransferBuffer use pinned memory again
* Handle output buffer in overflow properly
* GPU-based Bound&Split for OpenCL Renderer
  * Keep CPU-version available for comparison
* Make type of Bound&Split method configurable (CPU,LOCAL,ITERATIVE (pick better names))
  * Chose CPU, MULTIPASS, LOCAL
* Avoid Bound&Split stalls
* Move stuff from BoundNSplit to OpenCLBoundNSplit
* Remove config.max_block_assignments
* Rename config.patch_buffer_count
* Reorder config so patch_size and bound_n_split limit are side by side
* Debug source of pipeline stalls
* Write more compact patch evaluation kernel
* Pipeline drawcalls over several command-queues
  * Didn't help as much as hoped
* Rename OpenCL{Renderer,BoundNSplit} & PatchDrawer
  * Only renamed PatchDrawer
* Use glfwGetGLXContext() etc. to get context/display in shared CL/GL device setup
* Check out default framebuffer properties with glGetFramebufferAttachmentParameteriv() 
* Refactor OpenCL wrappers
  * User-events
  * Dump trace when pressing button
  * Make Events shareable within device
  * Add device-level trace generation
  * Split into individual files
  * Add set_args intermediate in CL::Kernel
* Fix range_id/patch_id name inconsistencies
* Rename PatchesIndex to PatchIndex
* Fix configgen.py warning issues and switch to Python3+Wheezy
* Switch formatMapGen to Python3+Wheezy
* Add to github
* Configurable Precision
* Calculate B&S time
* Add and check hash of config file to avoid unnecessary safe
* Read DiagSplit paper
* Make SCons react to changes in tools dir
* Freecam
* Rework Bound & Split dataflow
* Load Killeroo
* More complex scene format
  * Configurable Camera
* Catmull-Clark SDS
  * Read "Exact evaluation of catmull-clark subdivision surfaces at arbitrary parameter values"
  * Read "Exact Evaluation of Catmull-Clark Subdivision Surfaces Near B-spline Boundaries"
  * Read "Rapid Evaluation of Catmull-Clark Subdivision Surfaces"
  * Read "Approximating Catmull-clark Subdivision Surfaces with Bicubic Patches"
    Loop & Schaefer
* Read:
  * '3D Rasterization: A Bridge between Rasterization and Ray Casting'
  * 'Fragment-Parallel Composite and Filter'
  * 'Task Management for Irregular-Parallel Workloads on the GPU'

